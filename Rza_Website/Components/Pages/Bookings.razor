@using Rza_Website.Models
@using Rza_Website.Services
@inject AttractionService AttractionService
@using Utilities
@inject UserSession UserSession
@inject NavigationManager NavigationManager
@inject TicketBookingService TicketBookingService
@inject TicketService TicketService


<h3>Bookings</h3>
@page "/Bookings"
<Rza_Website.Components.Layout.NavMenu />

@if (attractions != null)
{
    @foreach (Attraction attraction in attractions)
    {
        <div>
            @attraction.Name: £@attraction.Price
            <button @onclick="@(e => AddTicket(attraction.AttractionId))">Add to Basket</button>

        </div>
    }
    <button>Book Tickets</button>
}
else
{
    <div>no attractions</div>
}


@code {


    List<Attraction> attractions;
    List<Ticket> tickets;
    DateOnly ticketDate;
    Ticketbooking newTicketbooking;


    protected override async Task OnInitializedAsync()
    {
        if (UserSession.UserId == 0)
        {
            NavigationManager.NavigateTo("/");
        }

        else
        {
            attractions = await AttractionService.GetAttractionsAsync();
            tickets = new List<Ticket>();
        }
    }

    private void AddTicket(int attractionId)
    {
        Console.WriteLine("AddTicket button was clicked");
        Ticket newTicket = new Ticket();
        newTicket.AttractionId = attractionId;
        tickets.Add(newTicket);
    }

    private async Task BookTickets()
    {
        //this one books all the tickets in the basket
        Ticketbooking newTicketbooking = new Ticketbooking();
        newTicketbooking.CustomerId = UserSession.UserId;
        newTicketbooking.Date = ticketDate;
        newTicketbooking.Date = DateOnly.FromDateTime(DateTime.Now);
        await TicketBookingService.AddTicketBookingAsync(newTicketbooking);
        
        foreach (Ticket ticket in tickets)
        {
            ticket.Ticketbooking = newTicketbooking;
            await TicketService.AddTicketAsync(ticket);
        }
    }
}

}




